from dotenv import load_dotenv
import os
import openai
import appConfig

load_dotenv()
def initialize_openai_api():
    openai.api_type = appConfig.fetchKey("OPENAI_TYPE").strip()
    openai.api_base = appConfig.fetchKey("OPENAI_BASE").strip()
    openai.api_version = appConfig.fetchKey("OPENAI_API_VERSION").strip()
    openai.api_key =  appConfig.fetchKey("OPENAI_API_KEY").strip()

def get_completion_from_messages(system_message, user_message, model="gpt-4", temperature=0, max_tokens=500) -> str:
    """
    Generates a completion response from a system message and a user message using the OpenAI Chat API.

    Args:
        system_message (str): The system message to be included in the conversation.
        user_message (str): The user message to be included in the conversation.
        model (str, optional): The model to use for generating the completion. Defaults to "gpt-4".
        temperature (float, optional): Controls the randomness of the output. Higher values make the output more random. Defaults to 0.
        max_tokens (int, optional): The maximum number of tokens in the response. Defaults to 500.

    Returns:
        str: The completion response generated by the Chat API.
    """
    initialize_openai_api()
    messages = [
        {'role': 'system', 'content': system_message},
        {'role': 'user', 'content': f"{user_message}"}
    ]
    response = openai.ChatCompletion.create(
            engine="anveshPOC",
            messages = messages,
            temperature=0.7,
            max_tokens=800,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0,
            stop=None
            )
    
    return response.choices[0].message["content"]

if __name__ == "__main__":
    system_message = "You are a helpful assistant"
    user_message = "Hello, how are you?"
    print(get_completion_from_messages(system_message, user_message))
